---

- hosts: node
  become: true
  become_user: root
  tasks:

  # Install Docker and its dependent components.
  - name: Install packages that allow apt to be used over HTTPS
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg-agent
      - software-properties-common

  - name: Add an apt signing key for Docker
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present

  - name: Add apt repository for stable version of docker
    apt_repository:
      repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable
      state: present

  - name: Install docker and its dependecies
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
      - docker-ce 
      - docker-ce-cli 
      - containerd.io
    notify:
      - docker status

  - name: Add ubuntu user to docker group
    user:
      name: ubuntu
      group: docker
  
  - name: Create docker daemon json config file
    lineinfile:
      path: /etc/docker/daemon.json
      line: "{{ item }}"
      create: yes
    with_items:
      - '{'
      - '   "exec-opts": ["native.cgroupdriver=systemd"],'
      - '   "log-driver": "json-file", '
      - '   "log-opts":{'
      - '   "max-size": "100m"'
      - '    },'
      - '   "storage-driver": "overlay2"'
      - '}'
    

  - name: Restart docker
    service:
      name: docker
      enabled: yes
      daemon_reload: yes
      state: restarted 

  #Kubelet will not start if the system has swap enabled, so we are disabling swap using the below code
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none

  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0

  - name: Set bridge-nf-call settings
    command: "{{ item }}"
    with_items:
    - modprobe overlay
    - modprobe bridge
    - modprobe br_netfilter

  - name: Configure sysctl
    lineinfile:
      path: /etc/sysctl.d/kubernetes.conf
      line: "{{ item }}"
      create: yes 
    with_items:
      - 'net.bridge.bridge-nf-call-iptables = 1'
      - 'net.bridge.bridge-nf-call-ip6tables = 1'
      - 'net.ipv4.ip_forward = 1'
     

  - name: Restart sysctl
    command: sudo sysctl --system

  #Installing kubelet, kubeadm and kubectl using the below code
  - name: Add an apt signing key for Kubernetes
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present

  - name: Adding apt repository for Kubernetes
    apt_repository:
      repo: deb [arch=amd64] https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list

  - name: Install Kubernetes binaries
    apt: 
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet 
        - kubeadm 
        - kubectl
        - kubernetes-cni

  - name: Setting hostname 
    command: hostnamectl set-hostname {{ inventory_hostname }}

  #- name: Configure node ip
  #  lineinfile:
  #    path: /etc/default/kubelet
  #    line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_host }}
  #    create: yes

  - name: Restart kubelet
    service:
      name: kubelet
      daemon_reload: yes
      enabled: yes
      state: restarted
  
  - name: Copy the join command to server location
    copy: src=join-command dest=/tmp/join-command.sh mode=0777

  - name: Join the node to cluster
    command: sh /tmp/join-command.sh
 
  #Setup a handler for checking Docker daemon using the below code.
  handlers:
    - name: docker status
      service: name=docker state=started

  